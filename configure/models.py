from django.db import models

class CPU(models.Model):
    name = models.CharField(max_length=300)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField()
    socket = models.CharField(max_length=100, null=True)
    benchmark_mark = models.IntegerField(null=True, default=0)
    picture = models.URLField(null=True)
    guarantee = models.CharField(max_length=100, null=True)
    producing_country = models.CharField(max_length=50, null=True)
    model = models.CharField(max_length=70, null=True)
    generation_of_processors = models.CharField(max_length=70, null=True)
    manufacturer_code = models.CharField(max_length=50, null=True)
    release_year = models.IntegerField(null=True)
    cooling_system_included = models.CharField(max_length=100, null=True)
    thermal_interface_included = models.CharField(max_length=100, null=True)
    core = models.CharField(max_length=70, null=True)
    technical_process = models.CharField(max_length=100, null=True)
    number_of_cores = models.IntegerField(null=True)
    maximum_number_of_threads = models.CharField(max_length=50, null=True)
    l1_cache_instructions = models.CharField(max_length=100, null=True)
    l1_cache_data = models.CharField(max_length=100, null=True)
    l2_cache_size = models.CharField(max_length=100, null=True)
    l3_cache_size = models.CharField(max_length=100, null=True)
    cpu_base_frequency = models.CharField(max_length=10, null=True)
    maximum_frequency_in_turbo_mode = models.CharField(max_length=10, null=True)
    factor = models.IntegerField(null=True)
    free_multiplier = models.CharField(max_length=100, null=True)
    memory_type = models.CharField(max_length=10, null=True)
    maximum_supported_memory = models.CharField(max_length=100, null=True)
    number_of_channels = models.IntegerField(null=True)
    minimum_frequency_of_ram = models.IntegerField(null=True)
    maximum_frequency_of_ram = models.IntegerField(null=True)
    ecc_mode_support = models.CharField(max_length=14, null=True)
    heat_dissipation_tdp = models.IntegerField(null=True)
    configurable_tdp_ctdp = models.CharField(max_length=100, null=True)
    maximum_cpu_temperature = models.CharField(max_length=100, null=True)
    integrated_graphics_core = models.CharField(max_length=100, null=True)
    gpu_model = models.CharField(max_length=30, null=True)
    maximum_graphics_core_frequency = models.CharField(max_length=100, null=True)
    executive_blocks = models.IntegerField(null=True)
    stream_processors_shading_units = models.IntegerField(null=True)
    system_bus = models.CharField(max_length=10, null=True)
    bus_bandwidth = models.CharField(max_length=100, null=True)
    integrated_pci_express_controller = models.CharField(max_length=100, null=True)
    pci_express_lines = models.CharField(max_length=100, null=True)
    support_64_bit_instruction_set = models.CharField(max_length=100, null=True)
    multithreading = models.CharField(max_length=100, null=True)
    virtualization_technology = models.CharField(max_length=100, null=True)
    cpu_overclocking_technology = models.CharField(max_length=100, null=True)
    energy_saving_technology = models.CharField(max_length=100, null=True)
    a_set_of_instructions_and_commands = models.CharField(max_length=200, null=True)
    features_optional = models.CharField(max_length=100, null=True)


class motherboard(models.Model):
    name = models.CharField(max_length=300)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField()
    socket = models.CharField(max_length=50, null=True)
    release_year = models.IntegerField(null=True)
    picture = models.URLField(null=True)
    guarantee = models.CharField(max_length=30, null=True)
    producing_country = models.CharField(max_length=70, null=True)
    model = models.CharField(max_length=200, null=True)
    form_factor = models.CharField(max_length=50, null=True)
    height = models.CharField(max_length=50, null=True)
    width = models.CharField(max_length=50, null=True)
    integrated_central_processing_unit = models.CharField(max_length=50, null=True)
    embedded_processor_model = models.CharField(max_length=50, null=True)
    chipset = models.CharField(max_length=50, null=True)
    bios = models.CharField(max_length=50, null=True)
    uefi_bios = models.CharField(max_length=50, null=True)
    sli_crossfire_support = models.CharField(max_length=50, null=True)
    supported_memory_form_factor = models.CharField(max_length=50, null=True)
    supported_memory_type = models.CharField(max_length=50, null=True)
    ecc_mode_support = models.CharField(max_length=50, null=True)
    number_of_memory_slots = models.IntegerField(null=True)
    minimum_memory_frequency = models.IntegerField(null=True)
    maximum_memory_frequency = models.IntegerField(null=True)
    number_of_memory_channels = models.CharField(max_length=50, null=True)
    maximum_memory = models.IntegerField(null=True)
    type_and_number_of_sata_ports = models.CharField(max_length=50, null=True)
    sata_express_ports_quantity = models.CharField(max_length=50, null=True)
    number_of_m_2_slots = models.CharField(max_length=50, null=True)
    nvme_support = models.CharField(max_length=50, null=True)
    sata_raid_operation_mode = models.CharField(max_length=50, null=True)
    msata_connector = models.CharField(max_length=50, null=True)
    ide_controller = models.CharField(max_length=50, null=True)
    number_of_pci_e_x16_slots = models.CharField(max_length=50, null=True)
    number_of_pci_e_x8_slots = models.CharField(max_length=50, null=True)
    number_of_pci_e_x4_slots = models.CharField(max_length=50, null=True)
    number_of_pci_e_x1_slots = models.CharField(max_length=50, null=True)
    modes_of_operation_of_several_pci_e_x16_slots = models.CharField(max_length=200, null=True)
    pci_express_version = models.CharField(max_length=50, null=True)
    number_of_pci_slots = models.CharField(max_length=50, null=True)
    internal_usb_connectors_on_board = models.CharField(max_length=200, null=True)
    number_and_type_of_usb_on_the_rear_panel = models.CharField(max_length=200, null=True)
    video_outputs = models.CharField(max_length=50, null=True)
    number_of_analog_audio_connectors = models.CharField(max_length=50, null=True)
    digital_audio_ports_s_pdif = models.CharField(max_length=50, null=True)
    ps_2_ports = models.CharField(max_length=50, null=True)
    other_connectors_on_the_rear_panel = models.CharField(max_length=50, null=True)
    number_of_network_ports_rj_45 = models.CharField(max_length=50, null=True)
    sound = models.CharField(max_length=50, null=True)
    sound_scheme = models.CharField(max_length=50, null=True)
    sound_adapter_chipset = models.CharField(max_length=50, null=True)
    network_adapter_chipset = models.CharField(max_length=50, null=True)
    network_adapter_speed = models.CharField(max_length=50, null=True)
    built_in_wi_fi_adapter = models.CharField(max_length=50, null=True)
    bluetooth = models.CharField(max_length=50, null=True)
    cpu_cooler_power_connector = models.CharField(max_length=50, null=True)
    four_pin_connectors_for_system_fans = models.CharField(max_length=50, null=True)
    three_pin_connectors_for_system_fans = models.CharField(max_length=50, null=True)
    main_power_connector = models.CharField(max_length=50, null=True)
    processor_power_connector = models.CharField(max_length=50, null=True)
    number_of_supply_phases = models.CharField(max_length=50, null=True)
    illumination_of_board_elements = models.CharField(max_length=50, null=True)
    three_pin_led_connector_5v_d_g = models.CharField(max_length=50, null=True)
    four_pin_led_connector_12v_g_r_b = models.CharField(max_length=50, null=True)
    lpt_interface = models.CharField(max_length=50, null=True)
    equipment = models.CharField(max_length=300, null=True)
    application_for_interacting_with_a_smartphone = models.CharField(max_length=50, null=True)
    features_optional = models.CharField(max_length=400, null=True)
    m_2_form_factor = models.CharField(max_length=50, null=True)
    m_2_storage_logical_interface = models.CharField(max_length=200, null=True)
    m_2_key_e = models.CharField(max_length=50, null=True)


class GPU(models.Model):
    name = models.CharField(max_length=300)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField()
    picture = models.URLField(null=True)
    benchmark_mark = models.IntegerField(null=True, default=0)
    guarantee = models.CharField(max_length=30, null=True)
    producing_country = models.CharField(max_length=100, null=True)
    release_year = models.IntegerField(null=True)
    standards_and_technology_support = models.CharField(max_length=100, null=True)
    video_memory_size = models.CharField(max_length=100, null=True)
    memory_type = models.CharField(max_length=100, null=True)
    effective_memory_frequency = models.CharField(max_length=100, null=True)
    memory_bus_width = models.CharField(max_length=100, null=True)
    maximum_memory_bandwidth = models.CharField(max_length=100, null=True)
    microarchitecture = models.CharField(max_length=100, null=True)
    technical_process = models.CharField(max_length=100, null=True)
    nominal_frequency_of_the_video_chip = models.CharField(max_length=100, null=True)
    turbo_frequency = models.CharField(max_length=100, null=True)
    shader_alu = models.CharField(max_length=100, null=True)
    number_of_texture_units = models.CharField(max_length=100, null=True)
    number_of_rop_units = models.CharField(max_length=100, null=True)
    shader_version = models.CharField(max_length=100, null=True)
    maximum_processor_temperature_c = models.CharField(max_length=100, null=True)
    ray_tracing_support = models.CharField(max_length=100, null=True)
    video_connectors = models.CharField(max_length=100, null=True)
    maximum_resolution = models.CharField(max_length=100, null=True)
    number_of_simultaneously_connected_monitors = models.CharField(max_length=100, null=True)
    connection_interface = models.CharField(max_length=100, null=True)
    pci_express_version = models.CharField(max_length=100, null=True)
    support_for_multiprocessor_configuration = models.CharField(max_length=100, null=True)
    the_need_for_additional_food = models.CharField(max_length=100, null=True)
    auxiliary_power_connectors = models.CharField(max_length=100, null=True)
    maximum_power_consumption = models.IntegerField(null=True)
    recommended_power_supply = models.CharField(max_length=100, null=True)
    cooling_type = models.CharField(max_length=100, null=True)
    type_and_number_of_fans_installed = models.CharField(max_length=100, null=True)
    low_profile_card = models.CharField(max_length=100, null=True)
    number_of_occupied_expansion_slots = models.CharField(max_length=100, null=True)
    highlighting_the_elements_of_the_video_card = models.CharField(max_length=100, null=True)
    graphics_card_length = models.CharField(max_length=100, null=True)
    graphics_card_thickness = models.CharField(max_length=100, null=True)
    equipment = models.CharField(max_length=100, null=True)
    weight = models.CharField(max_length=100, null=True)
    features_optional = models.CharField(max_length=300, null=True)
    gpu_codename = models.CharField(max_length=100, null=True)
    peak_performance_of_chips_in_fp32 = models.CharField(max_length=100, null=True)
    rotation_speed_control = models.CharField(max_length=100, null=True)
    rgb_backlight_sync = models.CharField(max_length=100, null=True)
    lcd_display = models.CharField(max_length=100, null=True)
    bios_switch = models.CharField(max_length=100, null=True)


class RAM(models.Model):
    name = models.CharField(max_length=300)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField(null=True)
    picture = models.URLField(null=True)
    number_of_modules_included = models.IntegerField(null=True)
    the_volume_of_one_memory_module = models.IntegerField(null=True)
    model = models.CharField(max_length=100, null=True)
    release_year = models.IntegerField(null=True)
    clock_frequency = models.IntegerField(null=True)
    guarantee = models.CharField(max_length=100, null=True)
    producing_country = models.CharField(max_length=100, null=True)
    manufacturer_code = models.CharField(max_length=100, null=True)
    memory_type = models.CharField(max_length=100, null=True)
    memory_form_factor = models.CharField(max_length=100, null=True)
    register_memory = models.CharField(max_length=100, null=True)
    ecc_memory = models.CharField(max_length=100, null=True)
    bandwidth = models.CharField(max_length=100, null=True)
    intel_xmp_profiles = models.CharField(max_length=100, null=True)
    supported_operating_modes = models.CharField(max_length=100, null=True)
    cas_latency_cl = models.CharField(max_length=100, null=True)
    ras_to_cas_delay_trcd = models.CharField(max_length=100, null=True)
    row_precharge_delay_trp = models.CharField(max_length=100, null=True)
    the_presence_of_a_radiator = models.CharField(max_length=100, null=True)
    illumination_of_board_elements = models.CharField(max_length=100, null=True)
    height = models.CharField(max_length=100, null=True)
    low_profile = models.CharField(max_length=100, null=True)
    supply_voltage = models.CharField(max_length=100, null=True)
    activate_to_precharge_delay_tras = models.CharField(max_length=100, null=True)
    degree = models.CharField(max_length=100, null=True)
    features_optional = models.CharField(max_length=200, null=True)


class cooler(models.Model):
    name = models.CharField(max_length=200, null=True)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField(null=True)
    picture = models.URLField(null=True)
    power_dissipation = models.IntegerField(null=True)
    producing_country = models.CharField(max_length=200, null=True)
    model = models.CharField(max_length=200, null=True)
    socket = models.CharField(max_length=200, null=True)
    maximum_air_flow = models.CharField(max_length=200, null=True)
    construction_type = models.CharField(max_length=200, null=True)
    base_material = models.CharField(max_length=200, null=True)
    guarantee = models.CharField(max_length=200, null=True)
    radiator_material = models.CharField(max_length=200, null=True)
    number_of_heat_pipes = models.CharField(max_length=200, null=True)
    nickel_plated = models.CharField(max_length=200, null=True)
    fan_connector = models.CharField(max_length=200, null=True)
    number_of_fans_included = models.CharField(max_length=200, null=True)
    maximum_number_of_installed_fans = models.CharField(max_length=200, null=True)
    dimensions_of_complete_fans = models.CharField(max_length=200, null=True)
    maximum_rotation_speed = models.CharField(max_length=200, null=True)
    minimum_rotation_speed = models.CharField(max_length=200, null=True)
    rotation_speed_control = models.CharField(max_length=200, null=True)
    maximum_noise_level = models.CharField(max_length=200, null=True)
    fan_backlight_type = models.CharField(max_length=200, null=True)
    fan_illumination_color = models.CharField(max_length=200, null=True)
    illumination_source = models.CharField(max_length=200, null=True)
    fan_color = models.CharField(max_length=200, null=True)
    thermal_paste_included = models.CharField(max_length=200, null=True)
    equipment = models.CharField(max_length=200, null=True)
    height = models.CharField(max_length=200, null=True)
    width = models.CharField(max_length=200, null=True)
    length = models.CharField(max_length=200, null=True)
    weight = models.CharField(max_length=200, null=True)
    additional_information = models.CharField(max_length=200, null=True)


class hard25(models.Model):
    name = models.CharField(max_length=200, null=True)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField(null=True)
    picture = models.URLField(null=True)
    release_year = models.IntegerField(null=True)
    hdd_capacity = models.IntegerField(null=True)
    energy_consumption = models.CharField(max_length=200, null=True)
    guarantee = models.CharField(max_length=200, null=True)
    producing_country = models.CharField(max_length=200, null=True)
    a_type = models.CharField(max_length=200, null=True)
    model = models.CharField(max_length=200, null=True)
    manufacturer_code = models.CharField(max_length=200, null=True)
    hybrid_sshd_drive_ssd_buffer_capacity = models.CharField(max_length=200, null=True)
    buffer_volume = models.CharField(max_length=200, null=True)
    spindle_speed = models.CharField(max_length=200, null=True)
    average_access_time_read = models.CharField(max_length=200, null=True)
    interface = models.CharField(max_length=200, null=True)
    interface_bandwidth = models.CharField(max_length=200, null=True)
    impact_resistance_during_operation = models.CharField(max_length=200, null=True)
    storage_shock_resistance = models.CharField(max_length=200, null=True)
    noise_level_during_operation = models.CharField(max_length=200, null=True)
    noise_level_at_idle = models.CharField(max_length=200, null=True)
    standard_thickness = models.CharField(max_length=200, null=True)
    weight = models.CharField(max_length=200, null=True)
    data_exchange_rate = models.CharField(max_length=200, null=True)
    features_optional = models.CharField(max_length=200, null=True)


class hard35(models.Model):
    name = models.CharField(max_length=200, null=True)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField(null=True)
    picture = models.URLField(null=True)
    release_year = models.IntegerField(null=True)
    hdd_capacity = models.IntegerField(null=True)
    maximum_power_consumption = models.CharField(max_length=200, null=True)
    guarantee = models.CharField(max_length=200, null=True)
    producing_country = models.CharField(max_length=200, null=True)
    model = models.CharField(max_length=200, null=True)
    manufacturer_code = models.CharField(max_length=200, null=True)
    hybrid_sshd_drive_ssd_buffer_capacity = models.CharField(max_length=200, null=True)
    cache_size = models.CharField(max_length=200, null=True)
    spindle_speed = models.CharField(max_length=200, null=True)
    maximum_baud_rate = models.CharField(max_length=200, null=True)
    average_access_time_read = models.CharField(max_length=200, null=True)
    average_access_time_recording = models.CharField(max_length=200, null=True)
    average_latency = models.CharField(max_length=200, null=True)
    ncq_support = models.CharField(max_length=200, null=True)
    interface = models.CharField(max_length=200, null=True)
    interface_bandwidth = models.CharField(max_length=200, null=True)
    optimized_for_raid_arrays = models.CharField(max_length=200, null=True)
    impact_resistance_during_operation = models.CharField(max_length=200, null=True)
    noise_level_during_operation = models.CharField(max_length=200, null=True)
    noise_level_at_idle = models.CharField(max_length=200, null=True)
    helium_filled = models.CharField(max_length=200, null=True)
    appointment = models.CharField(max_length=200, null=True)
    smr_recording_technology = models.CharField(max_length=200, null=True)
    width = models.CharField(max_length=200, null=True)
    length = models.CharField(max_length=200, null=True)
    thickness = models.CharField(max_length=200, null=True)
    number_of_plates = models.CharField(max_length=200, null=True)
    weight = models.CharField(max_length=200, null=True)
    features_optional = models.CharField(max_length=200, null=True)


class SSD(models.Model):
    name = models.CharField(max_length=200)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField(null=True)
    picture = models.URLField(null=True)
    model = models.CharField(max_length=200, null=True)
    release_year = models.IntegerField(null=True)
    drive_volume = models.IntegerField(null=True)
    guarantee = models.CharField(max_length=200, null=True)
    producing_country = models.CharField(max_length=200, null=True)
    manufacturer_code = models.CharField(max_length=200, null=True)
    server = models.CharField(max_length=200, null=True)
    physical_interface = models.CharField(max_length=200, null=True)
    nvme = models.CharField(max_length=200, null=True)
    controller = models.CharField(max_length=200, null=True)
    memory_chip_type = models.CharField(max_length=200, null=True)
    bits_per_cell = models.CharField(max_length=200, null=True)
    memory_structure = models.CharField(max_length=200, null=True)
    maximum_sequential_write_speed = models.CharField(max_length=200, null=True)
    maximum_sequential_read_speed = models.CharField(max_length=200, null=True)
    resource_of_work = models.CharField(max_length=200, null=True)
    data_encryption = models.CharField(max_length=200, null=True)
    width = models.CharField(max_length=200, null=True)
    length = models.CharField(max_length=200, null=True)
    thickness_mm = models.CharField(max_length=200, null=True)
    trim_command_support = models.CharField(max_length=200, null=True)
    random_write_speed_4kb_files = models.CharField(max_length=200, null=True)
    mtbf_mean_time_between_failures = models.CharField(max_length=200, null=True)
    maximum_overload_shock_resistance = models.CharField(max_length=200, null=True)
    equipment = models.CharField(max_length=200, null=True)
    features_optional = models.CharField(max_length=200, null=True)
    weight = models.CharField(max_length=200, null=True)
    buffer_memory = models.CharField(max_length=200, null=True)
    random_read_speed_4kb_files = models.CharField(max_length=200, null=True)


class ssd_m2(models.Model):
    name = models.CharField(max_length=200, null=True)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField(null=True)
    picture = models.URLField(null=True)
    release_year = models.IntegerField(null=True)
    drive_volume = models.IntegerField(null=True)
    guarantee = models.CharField(max_length=200, null=True)
    producing_country = models.CharField(max_length=200, null=True)
    model = models.CharField(max_length=200, null=True)
    manufacturer_code = models.CharField(max_length=200, null=True)
    server = models.CharField(max_length=200, null=True)
    form_factor = models.CharField(max_length=200, null=True)
    logical_interface = models.CharField(max_length=200, null=True)
    m_2_socket_key = models.CharField(max_length=200, null=True)
    nvme = models.CharField(max_length=200, null=True)
    controller = models.CharField(max_length=200, null=True)
    memory_chip_type = models.CharField(max_length=200, null=True)
    bits_per_cell = models.CharField(max_length=200, null=True)
    memory_structure = models.CharField(max_length=200, null=True)
    buffer_memory = models.CharField(max_length=200, null=True)
    memory_chip_layout = models.CharField(max_length=200, null=True)
    maximum_sequential_write_speed = models.CharField(max_length=200, null=True)
    maximum_sequential_read_speed = models.CharField(max_length=200, null=True)
    writing_random_blocks_4kb_qd1 = models.CharField(max_length=200, null=True)
    read_4kb_random_blocks_qd1 = models.CharField(max_length=200, null=True)
    interface_bandwidth = models.CharField(max_length=200, null=True)
    resource_of_work = models.CharField(max_length=200, null=True)
    mtbf_mean_time_between_failures = models.CharField(max_length=200, null=True)
    maximum_overload_shock_resistance = models.CharField(max_length=200, null=True)
    trim_command_support = models.CharField(max_length=200, null=True)
    pci_e_to_m_2_adapter_included = models.CharField(max_length=200, null=True)
    length = models.CharField(max_length=200, null=True)
    width = models.CharField(max_length=200, null=True)
    thickness = models.CharField(max_length=200, null=True)
    weight = models.CharField(max_length=200, null=True)
    random_block_write_4kb_qd32 = models.CharField(max_length=200, null=True)
    data_encryption = models.CharField(max_length=200, null=True)
    nand_memory_interface = models.CharField(max_length=200, null=True)
    read_random_4kb_blocks_qd32 = models.CharField(max_length=200, null=True)
    energy_consumption = models.CharField(max_length=200, null=True)


class powersupply(models.Model):
    name = models.CharField(max_length=200, null=True)
    link = models.URLField(null=True, unique=True)
    price = models.IntegerField(null=True)
    picture = models.URLField(null=True)
    release_year = models.IntegerField(null=True)
    guarantee = models.CharField(max_length=200, null=True)
    producing_country = models.CharField(max_length=200, null=True)
    model = models.CharField(max_length=200, null=True)
    manufacturer_code = models.CharField(max_length=200, null=True)
    color = models.CharField(max_length=200, null=True)
    form_factor = models.CharField(max_length=200, null=True)
    atx12v_version = models.CharField(max_length=200, null=True)
    eps12v_support = models.CharField(max_length=200, null=True)
    certificate_80_plus = models.CharField(max_length=200, null=True)
    power_factor_corrector_pfc = models.CharField(max_length=200, null=True)
    protection_technologies = models.CharField(max_length=200, null=True)
    power_nominal = models.IntegerField(null=True)
    power_on_the_12_v_line = models.CharField(max_length=200, null=True)
    _12_v_line_current = models.CharField(max_length=200, null=True)
    line_current_3_3_v = models.CharField(max_length=200, null=True)
    line_current_5_v = models.CharField(max_length=200, null=True)
    standby_current_5_v_standby = models.CharField(max_length=200, null=True)
    line_current_12_v = models.CharField(max_length=200, null=True)
    mains_input_voltage_range = models.CharField(max_length=200, null=True)
    detachable_cables = models.CharField(max_length=200, null=True)
    main_power_connector = models.CharField(max_length=200, null=True)
    processor_cpu_power_connectors = models.CharField(max_length=200, null=True)
    graphics_card_power_connectors_pci_e = models.CharField(max_length=200, null=True)
    number_of_15_pin_sata_connectors = models.CharField(max_length=200, null=True)
    number_of_4_pin_molex_connectors = models.CharField(max_length=200, null=True)
    number_of_4_pin_floppy_connectors = models.CharField(max_length=200, null=True)
    main_power_cable_length = models.CharField(max_length=200, null=True)
    processor_power_cable_length = models.CharField(max_length=200, null=True)
    cooling_system = models.CharField(max_length=200, null=True)
    fan_dimensions = models.CharField(max_length=200, null=True)
    backlight_type = models.CharField(max_length=200, null=True)
    backlight_color = models.CharField(max_length=200, null=True)
    wire_braid = models.CharField(max_length=200, null=True)
    network_cable_included = models.CharField(max_length=200, null=True)
    length = models.CharField(max_length=200, null=True)
    width = models.CharField(max_length=200, null=True)
    height = models.CharField(max_length=200, null=True)
    weight = models.CharField(max_length=200, null=True)
    equipment = models.CharField(max_length=200, null=True)
    sata_power_cable_length = models.CharField(max_length=200, null=True)
    molex_power_cable_length = models.CharField(max_length=200, null=True)
    features_of_the = models.CharField(max_length=200, null=True)

